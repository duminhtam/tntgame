{
  "name": "grunt-shipit",
  "version": "0.4.3",
  "description": "Deployment using grunt.",
  "scripts": {
    "test": "mocha --recursive"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/neoziro/grunt-shipit.git"
  },
  "keywords": [
    "gruntplugin",
    "deploy",
    "capistrano"
  ],
  "author": {
    "name": "Greg Berg√©",
    "email": "berge.greg@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/neoziro/grunt-shipit/issues"
  },
  "dependencies": {
    "async": "^0.9.0",
    "lodash": "^2.4.1",
    "mkdirp": "^0.5.0",
    "stream-line-wrapper": "^0.1.1"
  },
  "peerDependencies": {
    "grunt": "^0.4.4"
  },
  "devDependencies": {
    "chai": "^1.9.1",
    "grunt": "^0.4.4",
    "mocha": "^1.18.2",
    "mock-utf8-stream": "^0.1.1",
    "rewire": "^2.0.0",
    "sinon": "^1.9.1",
    "sinon-chai": "^2.5.0"
  },
  "readme": "# grunt-shipit \n\n[![Build Status](https://travis-ci.org/neoziro/grunt-shipit.svg?branch=master)](https://travis-ci.org/neoziro/grunt-shipit)\n[![Dependency Status](https://david-dm.org/neoziro/grunt-shipit.svg?theme=shields.io)](https://david-dm.org/neoziro/grunt-shipit)\n[![devDependency Status](https://david-dm.org/neoziro/grunt-shipit/dev-status.svg?theme=shields.io)](https://david-dm.org/neoziro/grunt-shipit#info=devDependencies)\n\n![Shipit logo](https://cloud.githubusercontent.com/assets/266302/3756454/81df9f46-182e-11e4-9da6-b2c7a6b84136.png)\n\nShipit is a deploy tool written in node.js and based on Grunt. Shipit was built to be a Capistrano alternative for people who want to write tasks in JavaScript and don't have a piece of ruby in their beautiful codebase.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```sh\nnpm install grunt-shipit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-shipit');\n```\n\n## Usage\n\n```\ngrunt shipit:<stage> <tasks ...>\n```\n\n## Dependencies\n\n### Local\n\n- git 1.7.8+\n- rsync 3+\n- OpenSSH 5+\n\n### Remote\n\n- GNU coreutils 5+\n\n## Shipit task\n\n### Run task\n\n```\ngrunt shipit:<stage> <tasks ...>\n```\n\n### Options\n\n#### workspace\n\nType: `String`\n\nDefine the local working path of the project deployed.\n\n#### deployTo\n\nType: `String`\n\nDefine the remote path where the project will be deployed. A directory `releases` is automatically created. A symlink `current` is linked to the current release.\n\n#### repositoryUrl\n\nType: `String`\n\nGit URL of the project repository.\n\n#### branch\n\nType: `String`\n\nTag, branch or commit to deploy.\n\n#### ignores\n\nType: `Array<String>`\n\nAn array of paths that match ignored files. These paths are used in the rsync command.\n\n#### keepReleases\n\nType: `String`\n\nNumber of release to keep on the remote server.\n\n#### servers\n\nType: `String` or `Array<String>`\n\nServers on which the project will be deployed. Pattern must be `user@myserver.com` if user is not specified (`myserver.com`) the default user will be \"deploy\".\n\n### Usage example\n\n```js\nshipit: {\n  options: {\n    workspace: '/tmp/github-monitor',\n    deployTo: '/tmp/deploy_to',\n    repositoryUrl: 'https://github.com/user/repo.git',\n    ignores: ['.git', 'node_modules'],\n    keepReleases: 2\n  },\n  staging: {\n    servers: 'user@myserver.com'\n  }\n}\n```\n\nTo deploy on staging, you must use the following command :\n\n```\ngrunt shipit:staging deploy\n```\n\nYou can rollback to the previous releases with the command :\n\n```\ngrunt shipit:staging rollback\n```\n\n### Events\n\nShipit has several events describe in the workflow, you can add custom event and listen to events.\n\n```js\ngrunt.registerTask('build', function () {\n  // ...\n  grunt.shipit.emit('buit');\n});\n\ngrunt.shipit.on('fetched', function () {\n  grunt.task.run(['build']);\n});\n\n```\n\n### Methods\n\n#### shipit.local(command, [options], callback)\n\nRun a command locally and streams the result.\n\n```js\nshipit.local('ls -lah', { cwd: '/tmp/deploy/workspace' }, function (err, stdout) {\n  // ...\n});\n```\n\n#### shipit.remote(command, [options], callback)\n\nRun a command remotely and streams the result.\n\nIf you want to run a `sudo` command, the ssh connection will use the TTY mode automatically.\n\n```js\nshipit.remote('ls -lah', function (err, stdout) {\n  // ...\n});\n```\n\n#### shipit.remoteCopy(src, dest, callback)\n\nMake a remote copy from a local path to a dest path.\n\n```js\nshipit.remoteCopy('/tmp/workspace', '/opt/web/myapp', function (err) {\n  // ...\n});\n```\n\n### Variables\n\nShipit attach several variables during the deploy and the rollback process :\n\n#### shipit.config.*\n\nAll options describe in the config sections are avalaible in the `shipit.config` object.\n\n#### shipit.repository\n\nAttached during `deploy:fetch` task.\n\nYou can manipulate the repository using git command, the API is describe in [gift](https://github.com/sentientwaffle/gift).\n\n#### shipit.releaseDirname\n\nAttached during `deploy:update` and `rollback:init` task.\n\nThe current release dirname of the project, the format used is \"yyyymmddHHMMss\" (grunt.template.date format).\n\n#### shipit.releasesPath\n\nAttached during `deploy:update` and `rollback:init` task.\n\nThe remote releases path.\n\n#### shipit.releasePath\n\nAttached during `deploy:update` and `rollback:init` task.\n\nThe complete release path : `path.join(shipit.releasesPath, shipit.releaseDirname)`.\n\n#### shipit.currentPath\n\nAttached during `deploy:publish` and `rollback:init` task.\n\nThe current symlink path : `path.join(shipit.config.deployTo, 'current')`.\n\n### Workflow tasks\n\n- deploy\n  - deploy:init\n    - Emit event \"deploy\".\n  - deploy:fetch\n    - Create workspace.\n    - Initialize repository.\n    - Add remote.\n    - Fetch repository.\n    - Checkout commit-ish.\n    - Merge remote branch in local branch.\n    - Emit event \"fetched\".\n  - deploy:update\n    - Create and define release path.\n    - Remote copy project.\n    - Emit event \"updated\".\n  - deploy:publish\n    - Update symlink.\n    - Emit event \"published\".\n  - deploy:clean\n    - Remove old releases.\n    - Emit event \"cleaned\".\n- rollback\n  - rollback:init\n    - Define release path.\n    - Emit event \"rollback\".\n  - deploy:publish\n    - Update symlink.\n    - Emit event \"published\".\n  - deploy:clean\n    - Remove old releases.\n    - Emit event \"cleaned\".\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/neoziro/grunt-shipit",
  "_id": "grunt-shipit@0.4.3",
  "_shasum": "e1c927fe25915ace4577857f527e6eb1598d0381",
  "_from": "grunt-shipit@",
  "_resolved": "https://registry.npmjs.org/grunt-shipit/-/grunt-shipit-0.4.3.tgz"
}
